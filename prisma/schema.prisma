// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MEDICHIVE_ADMIN
  INSTITUTE_ADMIN
  LAB_ADMIN
  DOCTOR
  PATIENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  password  String
  name      String
  email     String    @unique
  address   String?
  nic       String?
  contactNo String
  gender    Gender
  dob       DateTime?
  roles     UserRole

  doctor         Doctor?
  instituteAdmin InstituteAdmin?
  patient        Patient?
  medichiveAdmin MedichiveAdmin?
  labAdmin       LabAdmin?
}

model Doctor {
  id            String              @id @default(uuid())
  experience    Float
  licenseNumber String
  userId        String              @unique
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  availability  DoctorAvailability?
  DoctorRating  DoctorRating[]
}

model DoctorAvailability {
  id       Int    @id @default(autoincrement())
  doctorId String @unique
  doctor   Doctor @relation(fields: [doctorId], references: [id])
}

model DoctorSpecialization {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model InstituteAdmin {
  id     Int    @id @default(autoincrement())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Patient {
  id     Int    @id @default(autoincrement())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  DoctorRating DoctorRating[]
}

model MedichiveAdmin {
  id     Int    @id @default(autoincrement())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model LabAdmin {
  id     Int    @id @default(autoincrement())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Institute {
  id                 Int    @id @default(autoincrement())
  name               String
  registrationNumber String
  contactNumber      String
  website            String
  address            String
  description        String
  certificate        String
}

model Lab {
  id                 Int    @id @default(autoincrement())
  name               String
  registrationNumber String
  contactNumber      String
  website            String
  address            String
  description        String
  certificate        String
}

model Appointment {
  id          Int    @id @default(autoincrement())
  description String
}

model Diagnosis {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model drug {
  id          Int    @id @default(autoincrement())
  name        String
  code        String
  description String
}

model LabReport {
  id          Int    @id @default(autoincrement())
  description String
  name        String
}

model Rate {
  id Int @id @default(autoincrement())
}

model Complaint {
  id       Int    @id @default(autoincrement())
  complain String
}

model DoctorRating {
  id        Int      @id @default(autoincrement())
  doctorId  String
  patientId Int
  rating    Int // e.g., 1 to 5
  comment   String? // optional text review
  createdAt DateTime @default(now())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  patient   Patient  @relation(fields: [patientId], references: [id])
}
